##################################################################################################################
                MAP
##################################################################################################################
A map is a builtin type in Go which associates a value to a key

A map can be created by passing the type of key and value to the make function. 
make(map[type of key]type of value) is the syntax to create a map.

personSalary := make(map[string]int)  
string keys and int values.

> The zero value of a map is nil.
 the map has to be initialized using make function.
 1. initialization
 -----------------
 func main() {  
    var personSalary map[string]int
    if personSalary == nil {
        fmt.Println("map is nil. Going to make one.")
        personSalary = make(map[string]int)
    }
}

2. Adding items
-------------------
func main() {  
    personSalary := make(map[string]int)
    personSalary["steve"] = 12000
    personSalary["jamie"] = 15000
    personSalary["mike"] = 9000
    fmt.Println("personSalary map contents:", personSalary)
}

output: personSalary map contents: map[steve:12000 jamie:15000 mike:9000]

3. initialize a map during declaration itself.
--------------------------------------------------
personSalary := map[string]int {
        "steve": 12000,
        "jamie": 15000,
    }
    personSalary["mike"] = 9000
    
    
4.Accessing items of a map
------------------------------
func main() {  
    personSalary := map[string]int{
        "steve": 12000,
        "jamie": 15000,
    }    
    employee := "jamie"
    fmt.Println("Salary of", employee, "is", personSalary[employee])
}

 In the case of personSalary map, if we try to access an element which is not present then, 
 the zero value of int which is 0 will be returned.
 fmt.Println("Salary of joe is", personSalary["joe"])
 // joe is not there in the map
 Output: Salary of joe is 0  

>> What if we want to know whether a key is present in a map or not.
value, ok := map[key]  
If ok is true, then the key is present and its value is present in the variable value, else the key is absent.

Ex:
---
func main() {  
    personSalary := map[string]int{
        "steve": 12000,
        "jamie": 15000,
    }
    personSalary["mike"] = 9000
    newEmp := "joe"
    value, ok := personSalary[newEmp]
    if ok == true {
        fmt.Println("Salary of", newEmp, "is", value)
    } else {
        fmt.Println(newEmp,"not found")
    }
}

5. Iterate map
----------------
The range form of the for loop is used to iterate over all elements of a map.

ex:
---

func main() {  
    personSalary := map[string]int{
        "steve": 12000,
        "jamie": 15000,
    }
    personSalary["mike"] = 9000
    fmt.Println("All items of a map")
    for key, value := range personSalary {
        fmt.Printf("personSalary[%s] = %d\n", key, value)
    }
}


output:
--------
All items of a map  
personSalary[mike] = 9000  
personSalary[steve] = 12000  
personSalary[jamie] = 15000  

6. delete map
--------------
delete(map, key) is the syntax to delete key from a map. The delete function does no return any value.

> delete(personSalary, "steve")

7. Length of the map
--------------------
len(personSalary)

8. Maps are reference types
---------------------------
Similar to slices, maps are reference types. When a map is assigned to a new variable, they both point to 
the same internal data structure. 
Hence changes made in one will reflect in the other.

func main() {  
    personSalary := map[string]int{
        "steve": 12000,
        "jamie": 15000,
    }
    personSalary["mike"] = 9000
    fmt.Println("Original person salary", personSalary)
    newPersonSalary := personSalary
    newPersonSalary["mike"] = 18000
    fmt.Println("Person salary changed", personSalary)
}

output:
Original person salary map[steve:12000 jamie:15000 mike:9000]  
Person salary changed map[steve:12000 jamie:15000 mike:18000] 


9. Maps equality
----------------
Maps can't be compared using the == operator. The == can be only used to check if a map is nil.
















