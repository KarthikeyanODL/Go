########################################################################################################################
Function:
#########################################################################################################################

1. Syntax
----------
func functionname(parametername type) returntype {  
 //function body
}

Ex
func calculateBill(price int, no int) int {  
    var totalPrice = price * no
    return totalPrice
}
If consecutive parameters are of the same type, we can avoid writing the type each time and it is enough to be written once at the end
func calculateBill(price, no int) int {  
    var totalPrice = price * no
    return totalPrice
}

2. Multiple return values
-----------------------
func rectProps(length, width float64)(float64, float64) {  
    var area = length * width
    var perimeter = (length + width) * 2
    return area, perimeter
}

func main() {  
     area, perimeter := rectProps(10.8, 5.6)
    fmt.Printf("Area %f Perimeter %f", area, perimeter) 
}

3. Named return values
----------------------
func rectProps(length, width float64)(area, perimeter float64) {  
    area = length * width
    perimeter = (length + width) * 2
    return //no explicit return value
}

Since area and perimeter are specified in the function declaration as return values, they are automatically returned from the function 
when a return statement in encountered.


4.Blank Identifier
------------------

What if we only need the area and want to discard the perimeter. This is where _ is of use.
func rectProps(length, width float64) (float64, float64) {  
    var area = length * width
    var perimeter = (length + width) * 2
    return area, perimeter
}
func main() {  
    area, _ := rectProps(10.8, 5.6) // perimeter is discarded
    fmt.Printf("Area %f ", area)
}


########################################################################################################################

########################################################################################################################
