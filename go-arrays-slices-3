#######################################################################################################################
Arrays
#######################################################################################################################
An array is a collection of elements that belong to the same type. 
1. Syntax
---------
 var a [3]int //int array with length 3
 All elements in an array are automatically assigned the zero value of the array type.
 The index of an array starts from 0 and ends at length - 1
 //ex:
 var a [3]int //int array with length 3
    a[0] = 12 // array index starts at 0
    a[1] = 78
    a[2] = 50

2.  short hand declaration
-----------------------------

a := [3]int{12, 78, 50} // short hand declaration to create array
a := [3]int{12} // prints {12,0,0}
a := [...]int{12, 78, 50} // ... makes the compiler determine the length

 >arrays cannot be resized

a := [3]int{5, 78, 8}
var b [5]int
b = a //not possible since [3]int and [5]int are distinct types
Arrays cannot be assign directly

3.Arrays are value types
----------------------------
Arrays in Go are value types and not reference types
This means that when they are assigned to a new variable, a copy of the original array is assigned to the new variable. 
If changes are made to the new variable, it will not be reflected in the original array.
Ex:
func main() {  
    a := [...]string{"USA", "China", "India", "Germany", "France"}
    b := a // a copy of a is assigned to b
    b[0] = "Singapore"
    fmt.Println("a is ", a)
    fmt.Println("b is ", b) 
}

Output:
a is [USA China India Germany France]  
b is [Singapore China India Germany France]  


4. Pass Array to function
---------------------------

Similarly when arrays are passed to functions as parameters, they are passed by value and the original array in unchanged.

package main
import "fmt"

func changeLocal(num [5]int) {  
    num[0] = 55
    fmt.Println("inside function ", num)

}
func main() {  
    num := [...]int{5, 6, 7, 8, 8}
    fmt.Println("before passing to function ", num)
    changeLocal(num) //num is passed by value
    fmt.Println("after passing to function ", num)
}

output:
before passing to function  [5 6 7 8 8]  
inside function  [55 6 7 8 8]  
after passing to function  [5 6 7 8 8]  


5. Iterating arrays
--------------------
> Normal loop
 for i := 0; i < len(array); i++ { }
 
> using Range 
range returns both the index and the value at that index
 
 for i, v := range array {     //range returns both the index and value
        fmt.Printf("%d the element of a is %d\n", i, v)
        sum += v
 }

In case you want only the value and want to ignore the index, you can do this 
by replacing the index with the _ blank identifier.

for _, v := range a { //ignores index  
}
//  Similarly the value can also be ignored.

############################################################################################################
Slices
############################################################################################################

A slice is a convenient, flexible and powerful wrapper on top of an array. Slices do not own any data on their own. 
They are the just references to existing arrays

1. Creating a slice
-------------------
func main() {  
    a := [5]int{76, 77, 78, 79, 80}
    var b []int = a[1:4] //creates a slice from a[1] to a[3]
    fmt.Println(b)
}
//output: slice b has values [77 78 79].

2. modify Slice
----------------
Any modifications done to the slice will be reflected in the underlying array.
Ex:
func main() {  
    darr := [...]int{57, 89, 90, 82, 100, 78, 67, 69, 59}
    dslice := darr[2:5]
    fmt.Println("array before",darr)
    for i := range dslice {
        dslice[i]++
    }
    fmt.Println("array after",darr) 
}

output:
array before [57 89 90 82 100 78 67 69 59]  
array after [57 89 91 83 101 78 67 69 59]

func main() {  
    numa := [3]int{78, 79 ,80}
    nums1 := numa[:] //creates a slice which contains all elements of the array
    nums2 := numa[:] //creates a slice which contains all elements of the array
    fmt.Println("array before change 1",numa)
    nums1[0] = 100
    fmt.Println("array after modification to slice nums1", numa)
    nums2[1] = 101
    fmt.Println("array after modification to slice nums2", numa)
}

3. length and capacity of a slice
---------------------------------

The length of the slice is the number of elements in the slice. 
he capacity of the slice is the number of elements in the underlying array starting from the index 
from which the slice is created.

func main() {  
    fruitarray := [...]string{"apple", "orange", "grape", "mango", "water melon", "pine apple", "chikoo"}
    fruitslice := fruitarray[1:3]
    fmt.Printf("length of slice %d capacity %d", len(fruitslice), cap(fruitslice)) //length of is 2 and capacity is 6
}

In the above program, fruitslice is created from indexes 1 and 2 of the fruitarray. 
Hence the length of fruitslice is 2.
The length of the  fruitarray is 7. 
fruiteslice is created from index 1 of fruitarray. 
Hence the capacity of fruitslice is the no of elements in fruitarray starting from index 1 i.e from orange and that value is 6. 
Hence the capacity of fruitslice is 6. 
//The program outputs length of slice 2 capacity 6.


4. Creating a slice using make
--------------------------------
func make([]T, len, cap) []T can be used to create a slice by passing the type, length and capacity. 
The capacity parameter is optional and defaults to the length

func main() {  
    i := make([]int, 5, 5)
    fmt.Println(i)
}

5. Append
--------------
Arrays are restricted to fixed length and their length cannot be increased. 
Slices are dynamic and new elements can be appended to the slice using append function. 
The definition of append function is func append(s []T, x ...T) []T.

One question might be bothering you though. If slices are backed by arrays and arrays themselves are of fixed length then 
how come a slice is of dynamic length. Well what happens under the hoods is, when new elements are appended to the slice, 
a new array is created. The elements of the existing array are copied to this new array and a new slice reference for this new array 
is returned. 
The capacity of the new slice is now twice that of the old slice

func main() {  
    cars := []string{"Ferrari", "Honda", "Ford"}
    fmt.Println("cars:", cars, "has old length", len(cars), "and capacity", cap(cars)) //capacity of cars is 3
    cars = append(cars, "Toyota")
    fmt.Println("cars:", cars, "has new length", len(cars), "and capacity", cap(cars)) //capacity of cars is doubled to 6
}

6. Nil
-------
The zero value of a slice type is nil. A nil slice has length and capacity 0
It is possible to append values to a nil slice

func main() {  
    var names []string //zero value of a slice is nil
    if names == nil {
        fmt.Println("slice is nil going to append")
        names = append(names, "John", "Sebastian", "Vinay")
        fmt.Println("names contents:",names)
    }

7. Passing a slice to a function
---------------------------------
Slice - represented internally by a structure 
type slice struct {  
    Length        int
    Capacity      int
    ZerothElement *byte
}

When a slice is passed to a function, even though it's passed by value, the pointer variable will refer to the same underlying array. 
Hence when a slice is passed to a function as parameter, changes made inside the function are 
visible outside the function too. Lets write a program to check this out.
  
func subtactOne(numbers []int) {  
    for i := range numbers {
        numbers[i] -= 2
    }
}
func main() {  
    nos := []int{8, 7, 6}
    fmt.Println("slice before function call", nos)
    subtactOne(nos)                               //function modifies the slice
    fmt.Println("slice after function call", nos) //modifications are visible outside
}

8. Copy function
------------------
copy(countriesCpy, neededCountries) //copies neededCountries to countriesCpy



